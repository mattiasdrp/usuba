open Usuba_AST
open Basic_utils
open Utils

let bits_per_reg (prog : prog) (conf : Config.config) : int =
  match conf.archi with
  | Std -> (
      let main = last prog.nodes in
      let typ = (List.hd main.p_in).vd_typ in
      match get_type_dir typ with
      | Vslice -> (
          match get_type_m (List.hd main.p_in).vd_typ with
          | Mint x -> x
          | _ -> assert false)
      | _ -> conf.bits_per_reg)
  | _ -> default_bits_per_reg conf.archi

let gen_runtime (orig : prog) (prog : prog) (conf : Config.config)
    (filename : string) : string =
  let entry =
    (* STDLIB_IMPORT: Comparing to an empty string *)
    if Stdlib.(conf.fdti <> "") then
      List.(
        Nodes_to_c_fdti.def_to_c
          (nth prog.nodes (length prog.nodes - 1))
          conf.arr_entry conf)
    else if conf.masked then
      List.(
        Nodes_to_c_masked.def_to_c
          (nth prog.nodes (length prog.nodes - 1))
          conf.arr_entry conf)
    else if conf.ua_masked then
      List.(
        Nodes_to_c_ua_masked.def_to_c
          (nth prog.nodes (length prog.nodes - 1))
          conf.arr_entry conf)
    else
      List.(
        Nodes_to_c.def_to_c
          (nth prog.nodes (length prog.nodes - 1))
          conf.arr_entry conf)
  in
  let prog_c =
    (* STDLIB_IMPORT: Comparing to an empty string *)
    if Stdlib.(conf.fdti <> "") then
      map_no_end (fun x -> Nodes_to_c_fdti.def_to_c x false conf) prog.nodes
    else if conf.masked then
      map_no_end (fun x -> Nodes_to_c_masked.def_to_c x false conf) prog.nodes
    else if conf.ua_masked then
      map_no_end
        (fun x -> Nodes_to_c_ua_masked.def_to_c x false conf)
        prog.nodes
    else map_no_end (fun x -> Nodes_to_c.def_to_c x false conf) prog.nodes
  in

  let bench_fun =
    if conf.gen_bench then
      if conf.masked then Nodes_to_c_masked.gen_bench (last prog.nodes) conf
      else if conf.ua_masked then
        Nodes_to_c_ua_masked.gen_bench (last prog.nodes) conf
      else Nodes_to_c.gen_bench (last prog.nodes) conf
    else ""
  in

  Format.asprintf
    "/* This code was generated by Usuba.\n\
    \   See https://github.com/DadaIsCrazy/usuba.\n\
    \   From the file \"%s\" (included below). */\n\n\
     #include <stdint.h>\n\n\
     /* Do NOT change the order of those define/include */\n\
     %s\n\
     #ifndef BITS_PER_REG\n\
     #define BITS_PER_REG %d\n\
     #endif\n\
     /* including the architecture specific .h */\n\
     #include \"%s\"\n\n\
     /* auxiliary functions */\n\
     %s\n\n\
     /* main function */\n\
     %s\n\n\
     /* Additional functions */\n\
     %s\n\n\
     /* **************************************************************** */\n\
     /*                            Usuba source                          */\n\
     /*                                                                  */\n\
     /*\n\n\
     %a\n\n\
     */\n\
    \ " filename
    (if conf.shares <> 1 then
     Printf.sprintf "#define MASKING_ORDER %d" conf.shares
    else "")
    (bits_per_reg prog conf)
    (* STDLIB_IMPORT: Comparing to an empty string *)
    (if Stdlib.(conf.fdti <> "") then Nodes_to_c_fdti.c_header conf.archi
    else if conf.masked then Nodes_to_c_masked.c_header conf.archi
    else if conf.ua_masked then Nodes_to_c_ua_masked.c_header conf.archi
    else Nodes_to_c.c_header conf.archi)
    (join "\n\n" prog_c) entry bench_fun (Usuba_print.pp_prog ()) orig
